<Window x:Class="Captura.RegionSelector"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:Captura"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:models="clr-namespace:Captura.Models;assembly=Captura.Core"
        mc:Ignorable="d"
        Title="{Binding RegionSelector, Source={StaticResource Loc}, Mode=OneWay}"
        Background="Transparent"
        WindowStyle="None"
        AllowsTransparency="True"
        Topmost="True"
        SizeToContent="WidthAndHeight"
        Left="{Binding RegionSelectorViewModel.LeftDip, Mode=TwoWay, Source={StaticResource ServiceLocator}}"
        Top="{Binding RegionSelectorViewModel.TopDip, Mode=TwoWay, Source={StaticResource ServiceLocator}}"
        ShowInTaskbar="False">
    <Window.Style>
        <Style TargetType="Window">
            <Setter Property="ResizeMode" Value="CanResize"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ViewConditions.IsEnabled.Value, Source={StaticResource ServiceLocator}}" Value="False">
                    <Setter Property="ResizeMode" Value="NoResize"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Style>
    <Window.InputBindings>
        <KeyBinding Key="Left"
                    Command="{Binding RegionSelectorViewModel.MoveLeftCommand, Source={StaticResource ServiceLocator}}"/>
        <KeyBinding Key="Right"
                    Command="{Binding RegionSelectorViewModel.MoveRightCommand, Source={StaticResource ServiceLocator}}"/>
        <KeyBinding Key="Up"
                    Command="{Binding RegionSelectorViewModel.MoveUpCommand, Source={StaticResource ServiceLocator}}"/>
        <KeyBinding Key="Down"
                    Command="{Binding RegionSelectorViewModel.MoveDownCommand, Source={StaticResource ServiceLocator}}"/>

        <KeyBinding Key="Left"
                    Modifiers="Shift"
                    Command="{Binding RegionSelectorViewModel.DecreaseWidthCommand, Source={StaticResource ServiceLocator}}"/>
        <KeyBinding Key="Right"
                    Modifiers="Shift"
                    Command="{Binding RegionSelectorViewModel.IncreaseWidthCommand, Source={StaticResource ServiceLocator}}"/>
        <KeyBinding Key="Up"
                    Modifiers="Shift"
                    Command="{Binding RegionSelectorViewModel.DecreaseHeightCommand, Source={StaticResource ServiceLocator}}"/>
        <KeyBinding Key="Down"
                    Modifiers="Shift"
                    Command="{Binding RegionSelectorViewModel.IncreaseHeightCommand, Source={StaticResource ServiceLocator}}"/>
    </Window.InputBindings>
    <Grid>
        <Grid.Resources>
            <Style TargetType="Thumb">
                <Setter Property="Opacity" Value="0.01"/>
                <EventSetter Event="DragDelta" Handler="Thumb_OnDragDelta"/>
            </Style>
            <Style x:Key="CornerThumb" TargetType="Thumb" BasedOn="{StaticResource {x:Type Thumb}}">
                <Setter Property="Height" Value="5"/>
                <Setter Property="Width" Value="5"/>
            </Style>
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>

        <DockPanel Height="{Binding RegionSelectorViewModel.HeightDip, Mode=TwoWay, Source={StaticResource ServiceLocator}}"
                   Width="{Binding RegionSelectorViewModel.WidthDip, Mode=TwoWay, Source={StaticResource ServiceLocator}}"
                   Name="Region">
            <DockPanel.Resources>
                <Style TargetType="Border">
                    <Setter Property="BorderBrush">
                        <Setter.Value>
                            <DrawingBrush TileMode="Tile"
                                          Viewport="0,0,20,20"
                                          ViewportUnits="Absolute">
                                <DrawingBrush.Drawing>
                                    <DrawingGroup>
                                        <GeometryDrawing>
                                            <GeometryDrawing.Brush>
                                                <SolidColorBrush Color="{DynamicResource WindowBackgroundColor}"/>
                                            </GeometryDrawing.Brush>
                                            <GeometryDrawing.Geometry>
                                                <GeometryGroup>
                                                    <RectangleGeometry Rect="0,0,10,10" />
                                                    <RectangleGeometry Rect="10,10,10,10" />
                                                </GeometryGroup>
                                            </GeometryDrawing.Geometry>
                                        </GeometryDrawing>

                                        <GeometryDrawing>
                                            <GeometryDrawing.Brush>
                                                <SolidColorBrush Color="{DynamicResource AccentColor}"/>
                                            </GeometryDrawing.Brush>
                                            <GeometryDrawing.Geometry>
                                                <GeometryGroup>
                                                    <RectangleGeometry Rect="10,0,10,10" />
                                                    <RectangleGeometry Rect="0,10,10,10" />
                                                </GeometryGroup>
                                            </GeometryDrawing.Geometry>
                                        </GeometryDrawing>
                                    </DrawingGroup>
                                </DrawingBrush.Drawing>
                            </DrawingBrush>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RecordingViewModel.RecorderState.Value, Source={StaticResource ServiceLocator}}" Value="{x:Static models:RecorderState.Recording}">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Name="RedStoryboard">
                                    <Storyboard>
                                        <ColorAnimation To="#ef5350"
                                                        Storyboard.TargetProperty="BorderBrush.(DrawingBrush.Drawing).(DrawingGroup.Children)[0].(GeometryDrawing.Brush).(SolidColorBrush.Color)"
                                                        Duration="00:00:00.5"/>

                                        <ColorAnimation To="White"
                                                        Storyboard.TargetProperty="BorderBrush.(DrawingBrush.Drawing).(DrawingGroup.Children)[1].(GeometryDrawing.Brush).(SolidColorBrush.Color)"
                                                        Duration="00:00:00.5"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="RedStoryboard"/>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DockPanel.Resources>

            <Border BorderThickness="1,0"/>

            <Border BorderThickness="1,0"
                    DockPanel.Dock="Right"/>

            <Border BorderThickness="0,1"
                    DockPanel.Dock="Bottom"/>

            <Border BorderThickness="0,1"
                    DockPanel.Dock="Top"/>

            <InkCanvas Background="Transparent"
                       Visibility="{Binding AboutViewModel.Settings.UI.RegionSelectorDrawingTools, Source={StaticResource ServiceLocator}, Converter={StaticResource BoolToVisibilityConverter}}"
                       Name="InkCanvas"/>
        </DockPanel>

        <Thumb VerticalAlignment="Top"
               Height="2"
               Cursor="SizeAll"
               PreviewMouseLeftButtonDown="UIElement_OnPreviewMouseLeftButtonDown"/>

        <Grid Grid.Row="0"
              Grid.Column="0"
              IsEnabled="{Binding RecordingViewModel.RecorderState.Value, Source={StaticResource ServiceLocator}, Converter={StaticResource NotRecordingConverter}}">
            <Thumb VerticalAlignment="Bottom"
                   Height="2"
                   Cursor="SizeNS"
                   Tag="Bottom"/>

            <Thumb HorizontalAlignment="Left"
                   Width="2"
                   Cursor="SizeWE"
                   Tag="Left"/>
            
            <Thumb HorizontalAlignment="Right"
                   Width="2"
                   Cursor="SizeWE"
                   Tag="Right"/>

            <Thumb HorizontalAlignment="Left"
                   VerticalAlignment="Top"
                   Style="{StaticResource CornerThumb}"
                   Cursor="SizeNWSE"
                   Tag="TopLeft"/>

            <Thumb HorizontalAlignment="Right"
                   VerticalAlignment="Top"
                   Style="{StaticResource CornerThumb}"
                   Cursor="SizeNESW"
                   Tag="TopRight"/>

            <Thumb HorizontalAlignment="Left"
                   VerticalAlignment="Bottom"
                   Style="{StaticResource CornerThumb}"
                   Cursor="SizeNESW"
                   Tag="BottomLeft"/>

            <Thumb HorizontalAlignment="Right"
                   VerticalAlignment="Bottom"
                   Style="{StaticResource CornerThumb}"
                   Cursor="SizeNWSE"
                   Tag="BottomRight"/>
        </Grid>

        <Grid Grid.Row="1"
              Grid.Column="0"
              Margin="0,10,0,0">
            <Border BorderThickness="1"
                    Visibility="{Binding ViewConditions.IsEnabled.Value, Source={StaticResource ServiceLocator}, Converter={StaticResource BoolToVisibilityConverter}}"
                    BorderBrush="{DynamicResource Accent}"
                    VerticalAlignment="Top">
                <Grid HorizontalAlignment="Right"
                      Background="{DynamicResource WindowBackground}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>

                    <xctk:IntegerUpDown Width="60"
                                        Margin="3"
                                        IsEnabled="{Binding ViewConditions.IsEnabled.Value, Source={StaticResource ServiceLocator}}"
                                        Value="{Binding RegionSelectorViewModel.Width, Mode=TwoWay, Source={StaticResource ServiceLocator}}"/>

                    <Label Content="x"
                           Margin="7,3"
                           Grid.Column="1"/>

                    <xctk:IntegerUpDown Width="60"
                                        Margin="3"
                                        IsEnabled="{Binding ViewConditions.IsEnabled.Value, Source={StaticResource ServiceLocator}}"
                                        Value="{Binding RegionSelectorViewModel.Height, Mode=TwoWay, Source={StaticResource ServiceLocator}}"
                                        Grid.Column="2"/>

                    <Grid.LayoutTransform>
                        <ScaleTransform ScaleX="0.9" ScaleY="0.9"/>
                    </Grid.LayoutTransform>
                </Grid>

                <Border.Style>
                    <Style TargetType="Border">
                        <Setter Property="HorizontalAlignment" Value="Right"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Width, ElementName=Region, Converter={StaticResource IsLessThanConverter}, ConverterParameter=400}" Value="True">
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                <Setter Property="Margin" Value="0,40,0,0"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>

            <Border BorderThickness="1"
                    BorderBrush="{DynamicResource Accent}"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Top"
                    CornerRadius="15"
                    Padding="5,0"
                    Background="{DynamicResource WindowBackground}">
                <DockPanel>
                    <DockPanel.Resources>
                        <ScaleTransform x:Key="ButtonScale"
                                        ScaleX="0.85"
                                        ScaleY="0.85"/>
                        <Style TargetType="local:ModernButton" BasedOn="{StaticResource {x:Type local:ModernButton}}">
                            <Setter Property="LayoutTransform" Value="{StaticResource ButtonScale}"/>
                        </Style>
                    </DockPanel.Resources>

                    <local:ModernButton IconData="{Binding Icons.Crop, Source={StaticResource ServiceLocator}}"
                                        Visibility="{Binding ViewConditions.IsEnabled.Value, Source={StaticResource ServiceLocator}, Converter={StaticResource BoolToVisibilityConverter}}"
                                        Click="Snap_Click"
                                        ToolTip="Snap to Region"
                                        Margin="-5,0"/>

                    <local:ModernButton Click="CloseButton_Click"
                                        Visibility="{Binding ViewConditions.IsEnabled.Value, Source={StaticResource ServiceLocator}, Converter={StaticResource BoolToVisibilityConverter}}"
                                        Foreground="#77ef5350"
                                        IconData="{Binding Icons.Close, Source={StaticResource ServiceLocator}}"
                                        DockPanel.Dock="Right"
                                        ToolTip="{Binding Close, Source={StaticResource Loc}, Mode=OneWay}"/>

                    <local:ScreenShotButton DockPanel.Dock="Right"
                                            Margin="-5,0"/>

                    <local:ModernButton Command="{Binding RecordingViewModel.RecordCommand, Source={StaticResource ServiceLocator}}"
                                        Foreground="#b71c1c"
                                        IconData="{Binding RecordingViewModel.RecorderState.Value, Source={StaticResource ServiceLocator}, Converter={StaticResource StateToRecordButtonGeometryConverter}}"
                                        ToolTip="{Binding RecordStop, Source={StaticResource Loc}, Mode=OneWay}"/>

                    <local:PauseButton LayoutTransform="{StaticResource ButtonScale}"
                                       Margin="-5,0"/>

                    <StackPanel Orientation="Horizontal"
                                Margin="10,-1"
                                PreviewMouseLeftButtonDown="UIElement_OnPreviewMouseLeftButtonDown"
                                Visibility="{Binding TimerModel.Countdown, Source={StaticResource ServiceLocator}, Converter={StaticResource IsLessThanConverter}, ConverterParameter=1}"
                                Name="DurationLabel">
                        <Label Content="{Binding TimerModel.TimeSpan, Source={StaticResource ServiceLocator}}"/>

                        <Label Content="{Binding Settings.Duration, Converter={StaticResource SecondsToTimeSpanConverter}}"
                               ContentStringFormat="{} / {0}"
                               Visibility="{Binding Settings.Duration, Converter={StaticResource NotNullConverter}}"/>
                    </StackPanel>

                    <Label Visibility="{Binding Visibility, ElementName=DurationLabel, Converter={StaticResource NegatingConverter}}"
                           Content="{Binding TimerModel.Countdown, Source={StaticResource ServiceLocator}}"
                           Margin="10,-1"
                           PreviewMouseLeftButtonDown="UIElement_OnPreviewMouseLeftButtonDown"
                           Style="{StaticResource CountdownLabel}"/>
                </DockPanel>
            </Border>
        </Grid>

        <Border Grid.Row="0"
                Margin="10,0,0,0"
                Grid.Column="1"
                Grid.RowSpan="2"
                BorderBrush="{DynamicResource Accent}"
                BorderThickness="1"
                VerticalAlignment="Top"
                Visibility="{Binding AboutViewModel.Settings.UI.RegionSelectorDrawingTools, Source={StaticResource ServiceLocator}, Converter={StaticResource BoolToVisibilityConverter}}">
            <DockPanel Background="{DynamicResource WindowBackground}"
                       LastChildFill="False">
                <ListBox Name="ModesBox"
                         SelectedValuePath="Key"
                         DockPanel.Dock="Top"
                         Margin="0,0,0,10"
                         HorizontalContentAlignment="Center"
                         SelectionChanged="ModesBox_OnSelectionChanged">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Path Data="{Binding Key, Converter={StaticResource InkToolToIconConverter}}"
                                  Width="12"
                                  Height="12"
                                  Stretch="Uniform"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  ToolTip="{Binding Value}"
                                  Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType=ContentControl}}"
                                  Margin="5"/>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <xctk:ColorPicker Margin="0,2"
                                  BorderThickness="2"
                                  Width="35"
                                  DockPanel.Dock="Bottom"
                                  Name="ColorPicker"
                                  SelectedColorChanged="ColorPicker_OnSelectedColorChanged"
                                  VerticalContentAlignment="Stretch"
                                  ColorMode="ColorCanvas"
                                  ShowAdvancedButton="True"
                                  AdvancedButtonHeader="Color Canvas"
                                  StandardButtonHeader="Pallette"
                                  ShowRecentColors="True">
                    <xctk:ColorPicker.LayoutTransform>
                        <ScaleTransform ScaleX="0.85" ScaleY="0.85"/>
                    </xctk:ColorPicker.LayoutTransform>
                </xctk:ColorPicker>

                <xctk:IntegerUpDown Name="SizeBox"
                                    Minimum="1"
                                    Maximum="99"
                                    DockPanel.Dock="Bottom"
                                    ValueChanged="SizeBox_OnValueChanged"
                                    Margin="0,2"
                                    Width="40">
                    <xctk:IntegerUpDown.LayoutTransform>
                        <ScaleTransform ScaleX="0.85" ScaleY="0.85"/>
                    </xctk:IntegerUpDown.LayoutTransform>
                </xctk:IntegerUpDown>
            </DockPanel>

            <Border.Style>
                <Style TargetType="Border">
                    <Setter Property="Opacity" Value="0.2"/>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                         To="0.2"
                                                         Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
        </Border>
    </Grid>
</Window>
